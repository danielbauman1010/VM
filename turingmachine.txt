.Start PrintTuples

NumberOfTuples:	.Integer #8
Tape:			.String "_XX.YYY+_"
InitialState:	.Integer #0
InitialHead:	.Integer #0
Counter:		.Integer #0
Tuples: 	.tuple \ 0 _ 0 _ r \
			.tuple \ 0 X 0 A r \
			.tuple \ 0 . 0 . r \
			.tuple \ 0 Y 0 B r \
			.tuple \ 0 + 1  + l \
			.tuple \ 1 B 1 D l \
			.tuple \ 1 . 1 . l \
			.tuple \ 1 A 1 C l \
TupleMess:		.String "Tuples:"
ExecMess:		.String "Begin execution:"
InitStateMess:	.String "Initial State:"
InitHeadMess:	.String "Initial Head Position:"
InitTapeMess:	.String "Initial Tape:"
FinalMess:		.String "Execution ended with the tape:"
CounterMess:	.String "Number of steps for excecution:"
S:	.String "S: "
I:	.String " I: "
NS:	.String " NS: "
O:	.String " O: "
D:	.String " D: "
TAB:		.Integer #9
NewLine:	.Integer #10

;r5 will contain the number of tuples left to iterate
;r6 will contain the current tuple to print(starting on 0)

PrintTuples:	outs TupleMess
		jsr PrintLine
		movmr NumberOfTuples r5
		movir #0 r6				
PrintTuple:	jmp Print
Next:	jsr PrintLine
	addir #1 r6
	movrr r6 r1
	sojnz r5 Print
	jmp PrintBegin
				
;r0-r4 will contain the tuple's data

Print:	jsr FindTuple
	printi r0
	jsr PrintTab
	outcr r1
	jsr PrintTab
	printi r2
	jsr PrintTab
	outcr r3
	jsr PrintTab
	cmpir #1 r4
	jmpz Right
	jmp Left
Left:	jsr PrintLeft
	jmp Next
Right:	jsr PrintRight
	jmp Next
PrintRight:	movir #114 r7
		outcr r7	
		ret
PrintLeft:	movir #108 r7
		outcr r7
		ret
			
;r1 will contain the initial state
;r2 will contain the initial head position

PrintBegin:	outs ExecMess
		jsr PrintLine
		movmr InitialState r1
		movmr InitialHead r2
		jsr PrintTab
		outs InitStateMess
		jsr PrintTab
		printi r1	
		jsr PrintLine
		jsr PrintTab
		outs InitHeadMess
		jsr PrintTab
		printi r2
		jsr PrintLine
		jsr PrintTab
		outs InitTapeMess
		jsr PrintTab
		outs Tape
		jsr PrintLine
		jmp Exec
		
;r5 will contain the current address 
;r6 will contain the number that needs to be added to r5 depending on the tuple number
;r7 will contain the current character/number to save
;r0-r4 will contain the tuple's data
FindTuple:	movar Tuples r5 
			movrr r1 r6
			mulir #5 r6
			addrr r6 r5
			movxr r5 r7
			movrr r7 r0
			addir #1 r5
			movxr r5 r7
			movrr r7 r1				
			addir #1 r5
			movxr r5 r7
			movrr r7 r2
			addir #1 r5
			movxr r5 r7
			movrr r7 r3
			addir #1 r5
			movxr r5 r7
			movrr r7 r4
			ret
;r5 will contain the current head position
;r6 will contain the current state
;r7 will contain the current input
;r8 will contain the tuples left to iterate
;r9 will contain the current tuple

Exec:	movar Tape r5
	addrr r2 r5
	addir #1 r5
	movrr r1 r6
	movmr NumberOfTuples r8		
	movir #0 r9
	outs Tape
	jsr PrintLine
CheckForTuple:	movrr r9 r1
		movxr r5 r7		
		jsr FindTuple
Compare:	cmprr r0 r6
		jmpz SameState
		addir #1 r9
		sojnz r8 CheckForTuple
		jmp End
SameState:	cmprr r1 r7 
		jmpz Match
		addir #1 r9
		sojnz r8 CheckForTuple
		jmp End
Match:		jsr PrintTape
			jsr PrintLine
			movrr r2 r6
			movrx r3 r5
			addrr r4 r5
			movmr NumberOfTuples r8
			movmr Counter r9
			addir #1 r9
			movrm r9 Counter
			movir #0 r9			
			jmp CheckForTuple
PrintTab:	movmr TAB r5
			outcr r5
			ret
PrintLine:	movmr NewLine r5
			outcr r5
			ret
;0-4 contain the tuple's data
;r5 will contain the current position in the tape
;r6 will contain the characters left to iterate
;r7 will contain the current address
;r8 will contain the current character
;r9 will contain the [ character or the ] character
PrintTape:	movmr Tape r6		
			movar Tape r7
			addir #1 r7
Loop:		movxr r7 r8
			cmprr r7 r5
			jmpz PrintCurrent
			outcr r8
			addir #1 r7
			sojnz r6 Loop
Finish:		jsr PrintTab
			outs S
			printi r0
			outs I
			outcr r1
			outs NS
			printi r2
			outs O
			outcr r3
			outs D
			cmpir #1 r4
			jmpz PrintR
			jmp PrintL
Return:		ret
PrintR:		jsr PrintRight
			jmp Return
PrintL:		jsr PrintLeft			
			jmp Return
PrintCurrent:	movir #91 r9
				outcr r9
				outcr r8
				movir #93 r9
				outcr r9
				addir  #1 r7
				sojnz r6 Loop
				jmp Finish

End:	jsr PrintLine
		outs FinalMess
		jsr PrintTab
		outs Tape
		jsr PrintLine
		outs CounterMess
		jsr PrintTab
		movmr Counter r1
		printi r1
		halt
		.end	